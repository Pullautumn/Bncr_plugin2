/**
 * This file is part of the App project.
 * @author Aming
 * @name qq
 * @origin Bncr团队
 * @version 1.0.0
 * @description 外置qq机器人适配器
 * @adapter true
 * @public false
 * @disable false
 * @priority 100
 * @Copyright ©2023 Aming and Anmours. All rights reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 */

const path = require('path');

module.exports = async () => {
    if (!sysMethod.config.qqBot_Outside.enable) return sysMethod.startOutLogs('未启用外置qq 退出.');
    let qq = new Adapter('qq');
    if (sysMethod.config.qqBot_Outside.mode === 'ws') await ws(qq);
    else if (sysMethod.config.qqBot_Outside.mode === 'http') await http(qq);

    return qq;
};

async function ws(qq) {
    const events = require('events');
    const eventS = new events.EventEmitter();
    const { randomUUID } = require('crypto');
    const listArr = [];
    /* ws监听地址  ws://192.168.31.192:9090/api/qq/ws */
    router.ws('/api/bot/qqws', ws => {

        ws.on('message', msg => {
            const body = JSON.parse(msg);
            /* 拒绝心跳链接消息 */
            if (body.post_type === 'meta_event') return;

            /* 不是消息退出 */
            if (!body.post_type || body.post_type !== 'message') return;
            let msgInfo = {
                userId: body.user_id + '' || '',
                userName: body.sender.nickname || '',  // 注意: 在新的消息格式中，可能需要进一步解析sender字段来获取nickname。
                groupId: body.group_id ? body.group_id + '' : '0',
                groupName: body.group_name || '',  // 注意: 根据新的消息格式，您可能需要从其他字段获取这些信息。
                msg: (body.message && body.message[0] && body.message[0].data && body.message[0].data.text) || '',
                msgId: body.message_id + '' || '',
            };

            console.log('msg',msg,'最终消息：', msgInfo);
            qq.receive(msgInfo);
        });

        /* 发送消息方法 */
        qq.reply = async function (replyInfo) {
            try {
                let uuid = randomUUID();
                let body = {
                    action: 'send_msg',
                    params: {
                        message: [] // 初始化消息内容数组
                    },
                    echo: uuid,
                };

                // 判断发送的消息类型，并设置相应的detail_type和ID
                if (replyInfo.groupId && replyInfo.groupId !== '0') {
                    body.params.detail_type = 'group';
                    body.params.group_id = parseInt(replyInfo.groupId, 10); 
                } else {
                    body.params.detail_type = 'private';
                    body.params.user_id = Number(replyInfo.userId);
                }

                // 根据消息类型，设置消息内容
                if (replyInfo.type === 'text') {
                    body.params.message.push({
                        "type": "text",
                        "data": {
                            "text": replyInfo.msg
                        }
                    });
                }
                else if (replyInfo.type === 'image') {    // 图片
                    body.params.message = {
                        "type": "image",
                        "data": {
                            "file": replyInfo.path,     // 图片文件名
                            "type": replyInfo.show,     // 图片类型, flash 表示闪照, show 表示秀图, 默认普通图片
                            "subType": replyInfo.subType, // 图片子类型，0为普通图片，1为表情包，默认为0
                            "id": replyInfo.id          // 发送秀图时的特效id, 默认为40000
                        }
                    }
                } else if (replyInfo.type === 'video') {    // 视频
                    body.params.message = {
                        "type": "video",
                        "data": {
                            "file": replyInfo.path,
                            "cover": "",        // 视频封面, 支持http, file和base64发送, 格式必须为jpg
                            "c": ""             // 通过网络下载视频时的线程数, 默认单线程. (在资源不支持并发时会自动处理)
                        }
                    }
                } else if (replyInfo.type === 'record') {   // 语音
                    body.params.message = {
                        "type": "record",
                        "data": {
                            "file": replyInfo.path,         // 语音文件名
                            // "magic": "",	                // 发送时可选, 默认 0, 设置为 1 表示变声
                            // "cache": "",		            // 只在通过网络 URL 发送时有效, 表示是否使用已缓存的文件, 默认 1
                            // "proxy": "",	                // 只在通过网络 URL 发送时有效, 表示是否通过代理下载文件(需通过环境变量或配置文件配置代理) , 默认 1
                            // "timeout": ""	                // 只在通过网络 URL 发送时有效, 单位秒, 表示下载网络文件的超时时间, 默认不超时
                        }
                    }
                } 
                // console.log(body);
                ws.send(JSON.stringify(body));
                return new Promise((resolve, reject) => {
                    listArr.push({ uuid, eventS });
                    let timeoutID = setTimeout(() => {
                        delListens(uuid);
                        eventS.emit(uuid, '');
                    }, 60 * 1000);
                    eventS.once(uuid, res => {
                        try {
                            delListens(uuid);
                            clearTimeout(timeoutID);
                            resolve(res || '');
                        } catch (e) {
                            console.error(e);
                        }
                    });
                });
            } catch (e) {
                console.error('qq:发送消息失败', e);
            }
        };

        /* 推送消息 */
        qq.push = async function (replyInfo) {
            // console.log(replyInfo);
            return await this.reply(replyInfo);
        };

        /* 注入删除消息方法 */
        // qq.delMsg = async function (argsArr) {
        //     try {
        //         argsArr.forEach(e => {
        //             if (typeof e !== 'string' && typeof e !== 'number') return false;
        //             ws.send(
        //                 JSON.stringify({
        //                     action: 'delete_message',
        //                     params: { message_id: e },
        //                 })
        //             );
        //         });
        //         return true;
        //     } catch (e) {
        //         console.log('qq撤回消息异常', e);
        //         return false;
        //     }
        // };
    });

    /**向/api/系统路由中添加路由 */
    router.get('api/bot/qqws', (req, res) =>
        res.send({ msg: '这是Bncr 外置qq Api接口，你的get请求测试正常~，请用ws交互数据' })
    );
    router.post('/api/bot/qqws', async (req, res) =>
        res.send({ msg: '这是Bncr 外置qq Api接口，你的post请求测试正常~，请用ws交互数据' })
    );

    function delListens(id) {
        listArr.forEach((e, i) => e.uuid === id && listArr.splice(i, 1));
    }
}
